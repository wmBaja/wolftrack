{"version":3,"sources":["mapbox-style/test.geojson","api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","socket","io","sendMsg","emit","Math","random","on","console","log","data","dataLayer","fromJS","id","source","type","interactive","layout","paint","fill-color","fill-outline-color","Component","App","callback","_useState","useState","_useState2","Object","slicedToArray","fuelPerc","setFuelPerc","value","remainingPercentage","react_default","a","createElement","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4qBAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yVCElCC,QAASC,KAef,SAASC,IACPF,EAAOG,KAAK,OAAQC,KAAKC,UAf3BL,EAAOM,GAAG,UAAW,WACnBC,QAAQC,IAAI,qCAGdR,EAAOM,GAAG,SAAU,SAACG,GACnBF,QAAQC,IAAI,0BACZD,QAAQC,IAAIC,KAGdT,EAAOM,GAAG,UAAW,SAACG,GACpBF,QAAQC,IAAI,4BACZD,QAAQC,IAAIC,KCFd,IAAMC,EAAYC,YAAO,CACvBC,GAAI,OACJC,OAAQ,WACRC,KAAM,OACNC,aAAa,EACbC,OAAQ,GACRC,MAAO,CACLC,aAAc,2BACdC,qBAAsB,wBA2BRC,gBAqCHC,EA5Df,WAAe,IDHGC,ECGHC,EACmBC,mBAAS,GAD5BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACII,EADJJ,EAAA,GASb,ODZgBH,ECKP,SAACb,GACU,cAAdA,EAAKK,OACPP,QAAQC,IAAI,qBAAsBC,EAAKqB,MAAMC,qBAC7CF,EAAYpB,EAAKqB,MAAMC,uBDP3B/B,EAAOM,GAAG,SAAUgB,GCYlBU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,UAAQE,QAASlC,GAAjB,kBAEA8B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZP,MC5BSS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cd2fe6a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/test.0d6ca991.geojson\";","import io from 'socket.io-client';\n\nconst socket = io();\nsocket.on('connect', function() {\n  console.log('SocketIO connection established')\n});\n\nsocket.on('hwdata', (data) => {\n  console.log('Received hardware data');\n  console.log(data);\n});\n\nsocket.on('message', (data) => {\n  console.log('Received general message');\n  console.log(data);\n})\n\nfunction sendMsg() {\n  socket.emit('blah', Math.random());\n}\n\nfunction onHwData(callback) {\n  socket.on('hwdata', callback);\n}\n\nexport { sendMsg, onHwData };\n","import React, { Component, useState } from 'react';\nimport ReactMapGL from 'react-map-gl';\nimport { fromJS } from 'immutable';\n\nimport './App.css';\nimport './mapbox-gl.css';\n\nimport mapStyle from './mapbox-style/style.json';\nimport testGeo from './mapbox-style/test.geojson';\n\nimport { sendMsg, onHwData } from './api.js';\n\nconst dataLayer = fromJS({\n  id: 'data',\n  source: 'testData',\n  type: 'fill',\n  interactive: true,\n  layout: {},\n  paint: {\n    'fill-color': \"hsla(131, 86%, 55%, 0.6)\",\n    'fill-outline-color': \"hsl(164, 89%, 59%)\"\n  }\n});\n\nfunction App() {\n  const [fuelPerc, setFuelPerc] = useState(0);\n  onHwData((data) => {\n    if (data.type === 'fuel_data') {\n      console.log('updating fuel perc', data.value.remainingPercentage);\n      setFuelPerc(data.value.remainingPercentage);\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Henlo</h1>\n        <button onClick={sendMsg}>Send a message</button>\n        {/* <Map /> */}\n        <div className=\"Speed\">\n          {fuelPerc}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nclass Map extends Component {\n  state = {\n    mapStyle: fromJS(mapStyle),\n    viewport: {\n      width: '100vw',\n      height: '100vh',\n      latitude: 35.7898,\n      longitude: -78.6993,\n      zoom: 18\n    }\n  };\n\n  componentDidMount() {\n    this._loadData(testGeo);\n  }\n\n  _loadData = data => {\n    const mapStyle = this.state.mapStyle\n      // Add geojson source to map\n      .setIn(['sources', 'testData'], fromJS({type: 'geojson', data}))\n      // Add point layer to map\n      .set('layers', this.state.mapStyle.get('layers').push(dataLayer));\n\n    this.setState({data, mapStyle});\n  };\n\n  render() {\n    return (\n      <ReactMapGL\n        {...this.state.viewport}\n        onViewportChange={(viewport) => this.setState({viewport})}\n        mapStyle={this.state.mapStyle}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}